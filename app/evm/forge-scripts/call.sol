// SPDX-License-Identifier: Apache 2

pragma solidity ^0.8.0;

import "forge-std/Script.sol";
import "forge-std/console.sol";

import {MultichainWalrus} from "contracts/multichain_walrus/MultichainWalrus.sol";

contract ContractScript is Script {
    MultichainWalrus multichain;

    function setUp() public {
        multichain = MultichainWalrus(vm.envAddress("TESTING_HELLO_ADDRESS"));
    }

    function deploy() public {
        bytes[] memory updateData = new bytes[](1);
        updateData[0] =  (hex"504e41550100000003b801000000040d00e554ad1ba99ee7627a955e4be3bed12e38320c50d21ed847a360066963efc3ee0db3d8f95f52f6b93ede9981d00c23098e59c8563cede2614e66b453105b2de401020eeca59a009503699ef8495ca65cf7c7768028f3657ec4dca3b5ec4e8307911844b5912698c5b4cc20971f73bc8226fb549d3b8dbaa552540dce7b9265b9a7a8000306f63b9baab7a07d076d59060058c4afe4464515d814c85dbcdcc581cfe6c493114bedaf173e9fa091dbf7002f61834a5a174e69f3657c58d724acb6eb3bbce5010483e8a1143e15390121bdaf836e6a9a820fc12bf38e3b19b24f83fbb4b96f03e764ca6fe625b7e03753c7ab2f55bb3e80089690640536fe0ebed9d1601e3ba1060006a3670e8f5872aa80d6422d9e5d4983efb30f10e779bf4a799177255c68bdf4be37b03ffc67cb6ce590852ed0fd1bafdbfd6a248733aee86c355fed405861a2d9000ac8249a6b0ddc9b0a9bb2e8f22bd8216e85e3f6230e834e3efe166ff001bc473e24c6c09a7ac0baa51522dc85418cb110c29c3383813842e93482a0d77dbb11c6000bb5da4b4d143c46f13e64568472a68cf5cbe84b2584f35ed758527de62ecd047520e73beeeac0c8dcd4c46a4fa7071147b38e79df5c91482bb1ad0d88b43b7926010c4959ab14612c70d9ae2d1ae6346585fed8beedc2a4842bc8e6774ba92515514c488f1712c5bfd9ce5b0c33bb54ab5024939ccbbbe010dd87bdecbbab1396ab19000d6cb377d538fac07d54d7166b887224bec8f03fca3e9020c460e049b42c8410e05931b0b8ef0c7d16661b66478aa359f280505260592d3e3d1e3e1b72261c148f000e205ba96b2559b0c917f9a7f1f7bf20298906a34bbe94ddb4bdc37607c18cab53206f26eeedf109697eba94def2647573f6d1c52f2e9e3bb04a01d2bb6dac77be010f8e25337c01d6d622c7756786e70c992f5ba92bf39203a610c00edb5a54c43a875b22912e6786a5b15dde8baba776af7e5a0a548ed3308ae05ce2dd724cd139510110b33c171f262bb7e62fc7769b651b27d9058e26a9ed295161d75a9babab54d00e75ada8cb87caa628a049e24670ab3997251076fc926fced639d6d5a630dbdb27011114d44b0c8b007d3ec9f8fbddf847c68a3a78f5739b5e980728c650c76e517a8e0ba36957b120ee6fe9f1740ae18ac013b34d5378ae2d4e3f79ccbf90a76918c101680ddfb500000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000007a80f62014155575600000000000cb58d1d00002710c4f55e90d8a8f01c6ec5259653fd388aba26563201005500ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000002a00ebc01c0000000006af10eefffffff800000000680ddfb500000000680ddfb400000029f4b0b30000000000067bbd1f0c5ff4e28eed7ceb90212029e82459fdbcea975ad5616f441471f894a4bd773751fe2d4cd08047996d6b79f7193f22f994f659de8d869344d42a28f304bd2205c413b19a6daee40eee6ac808c9e289c818bcc22ace52e490910ecf78a75e729e37713669ab77782cb10520496f6f3c9346061c08c64b474a112b091f9eb49be8325abc16ccd369701e7fe36f5922619f337c4c01dd97e0b002b51a99c56fdd79a59addff262a1e9d34a0bab8ee959eeb03469158c317e48317c437313969936e86c94653cf509b25e08cd5743fc01461b93e6941589fc5f5d2b6b970a8f00bcf38182e94fa41fb71837e5b9f2fe3fad861");

        multichain.updatePyth(updateData);
    }

    function run() public {
        // begin sending transactions
        vm.startBroadcast();

        deploy();

        // finished
        vm.stopBroadcast();
    }
}
